/**
 * Capabilities Comparison Tool
 * 
 * This script compares the LLM-Capabilities sheet (generated by search_llm_capabilities.gs)
 * with the IDE-Capabilities sheet to identify any discrepancies.
 */

// Configuration constants
const CONFIG = {
  SOURCE_SHEET_NAME: "LLM-Capabilities",
  TARGET_SHEET_NAME: "IDE-Capabilities",
  REPORT_SHEET_NAME: "Comparison-Report",
  COLORS: {
    TITLE_BG: "#000000",
    TITLE_TEXT: "#FFFFFF",
    HEADER_BG: "#D3D3D3",
    ERROR_BG: "#FFCCCB",
    SUCCESS_BG: "#90EE90"
  }
};

/**
 * Creates custom menu when spreadsheet is opened
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Comparar Planilhas')
      .addItem('Comparar Capabilities', 'compareCapabilities')
      .addToUi();
}

/**
 * Main function to compare capabilities between sheets
 */
function compareCapabilities() {
  try {
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    
    // Get source and target sheets
    const sourceSheet = spreadsheet.getSheetByName(CONFIG.SOURCE_SHEET_NAME);
    const targetSheet = spreadsheet.getSheetByName(CONFIG.TARGET_SHEET_NAME);
    
    // Validate sheets exist
    if (!sourceSheet) {
      throw new Error(`Planilha "${CONFIG.SOURCE_SHEET_NAME}" não encontrada. Execute o script search_llm_capabilities.gs primeiro.`);
    }
    
    if (!targetSheet) {
      throw new Error(`Planilha "${CONFIG.TARGET_SHEET_NAME}" não encontrada.`);
    }
    
    // Create or clear report sheet
    const reportSheet = _prepareReportSheet(spreadsheet);
    
    // Get data from both sheets
    const sourceData = _getSheetData(sourceSheet);
    const targetData = _getSheetData(targetSheet);
    
    // Compare data and generate report
    const discrepancies = _compareData(sourceData, targetData);
    
    // Display report
    _displayReport(reportSheet, discrepancies, sourceData.headers);
    
    // Show completion message
    const message = discrepancies.length > 0 
      ? `Comparação concluída. Foram encontradas ${discrepancies.length} divergências.` 
      : "Comparação concluída. Nenhuma divergência encontrada!";
    
    SpreadsheetApp.getUi().alert("Resultado da Comparação", message, SpreadsheetApp.getUi().ButtonSet.OK);
    
  } catch (error) {
    SpreadsheetApp.getUi().alert("Erro: " + error.message);
  }
}

// =============================================================================
// Private Helper Functions
// =============================================================================

/**
 * Prepares the report sheet
 * @param {Object} spreadsheet - Spreadsheet object
 * @return {Object} Report sheet object
 * @private
 */
function _prepareReportSheet(spreadsheet) {
  let reportSheet = spreadsheet.getSheetByName(CONFIG.REPORT_SHEET_NAME);
  
  if (reportSheet) {
    // Clear existing content if sheet exists
    reportSheet.clear();
  } else {
    // Create new sheet if it doesn't exist
    reportSheet = spreadsheet.insertSheet(CONFIG.REPORT_SHEET_NAME);
  }
  
  return reportSheet;
}

/**
 * Gets data from a sheet including headers and rows
 * @param {Object} sheet - Sheet object
 * @return {Object} Object containing headers and rows
 * @private
 */
function _getSheetData(sheet) {
  const lastRow = sheet.getLastRow();
  const lastColumn = sheet.getLastColumn();
  
  // Skip the title row (row 1) and start from the header row (row 2)
  const headerRange = sheet.getRange(2, 1, 1, lastColumn);
  const headers = headerRange.getValues()[0];
  
  // Get data rows (starting from row 3)
  const dataRange = sheet.getRange(3, 1, lastRow - 2, lastColumn);
  const rows = dataRange.getValues();
  
  return {
    headers: headers,
    rows: rows
  };
}

/**
 * Compares data between source and target sheets
 * @param {Object} sourceData - Source sheet data
 * @param {Object} targetData - Target sheet data
 * @return {Array} Array of discrepancies
 * @private
 */
function _compareData(sourceData, targetData) {
  const discrepancies = [];
  
  // Check if headers match
  if (!_arraysEqual(sourceData.headers, targetData.headers)) {
    discrepancies.push({
      type: "header",
      message: "Os cabeçalhos das planilhas não correspondem"
    });
    return discrepancies; // Stop comparison if headers don't match
  }
  
  // Create lookup maps for faster comparison
  const sourceMap = _createLookupMap(sourceData.rows);
  const targetMap = _createLookupMap(targetData.rows);
  
  // Compare source to target
  _findDiscrepancies(sourceData, targetData, sourceMap, targetMap, discrepancies);
  
  // Compare target to source (to find models in target that don't exist in source)
  _findMissingModels(sourceData, targetData, sourceMap, targetMap, discrepancies);
  
  return discrepancies;
}

/**
 * Creates a lookup map for faster data access
 * @param {Array} rows - Data rows
 * @return {Object} Lookup map
 * @private
 */
function _createLookupMap(rows) {
  const map = {};
  
  rows.forEach((row, rowIndex) => {
    const provider = row[0];
    const model = row[1];
    const key = `${provider}|${model}`;
    
    map[key] = {
      rowIndex: rowIndex,
      data: row
    };
  });
  
  return map;
}

/**
 * Finds discrepancies between source and target data
 * @param {Object} sourceData - Source sheet data
 * @param {Object} targetData - Target sheet data
 * @param {Object} sourceMap - Source lookup map
 * @param {Object} targetMap - Target lookup map
 * @param {Array} discrepancies - Array to store discrepancies
 * @private
 */
function _findDiscrepancies(sourceData, targetData, sourceMap, targetMap, discrepancies) {
  sourceData.rows.forEach((sourceRow, sourceRowIndex) => {
    const provider = sourceRow[0];
    const model = sourceRow[1];
    const key = `${provider}|${model}`;
    
    if (targetMap[key]) {
      // Model exists in both sheets, compare capabilities
      const targetRow = targetMap[key].data;
      
      for (let colIndex = 2; colIndex < sourceRow.length; colIndex++) {
        if (sourceRow[colIndex] !== targetRow[colIndex]) {
          discrepancies.push({
            type: "value",
            provider: provider,
            model: model,
            capability: sourceData.headers[colIndex],
            sourceValue: sourceRow[colIndex],
            targetValue: targetRow[colIndex],
            sourceRowIndex: sourceRowIndex + 3, // +3 because data starts at row 3
            targetRowIndex: targetMap[key].rowIndex + 3,
            columnIndex: colIndex + 1 // +1 because arrays are 0-indexed
          });
        }
      }
    } else {
      // Model exists in source but not in target
      discrepancies.push({
        type: "missing_model",
        provider: provider,
        model: model,
        location: "target",
        rowIndex: sourceRowIndex + 3
      });
    }
  });
}

/**
 * Finds models that exist in target but not in source
 * @param {Object} sourceData - Source sheet data
 * @param {Object} targetData - Target sheet data
 * @param {Object} sourceMap - Source lookup map
 * @param {Object} targetMap - Target lookup map
 * @param {Array} discrepancies - Array to store discrepancies
 * @private
 */
function _findMissingModels(sourceData, targetData, sourceMap, targetMap, discrepancies) {
  targetData.rows.forEach((targetRow, targetRowIndex) => {
    const provider = targetRow[0];
    const model = targetRow[1];
    const key = `${provider}|${model}`;
    
    if (!sourceMap[key]) {
      // Model exists in target but not in source
      discrepancies.push({
        type: "missing_model",
        provider: provider,
        model: model,
        location: "source",
        rowIndex: targetRowIndex + 3
      });
    }
  });
}

/**
 * Displays the comparison report
 * @param {Object} reportSheet - Report sheet object
 * @param {Array} discrepancies - Array of discrepancies
 * @param {Array} headers - Headers from source sheet
 * @private
 */
function _displayReport(reportSheet, discrepancies, headers) {
  // Add title
  _addReportTitle(reportSheet);
  
  if (discrepancies.length === 0) {
    // No discrepancies found
    _addNoDiscrepanciesMessage(reportSheet);
    return;
  }
  
  // Add report headers
  _addReportHeaders(reportSheet);
  
  // Add discrepancies
  _addDiscrepancies(reportSheet, discrepancies, headers);
  
  // Format report
  _formatReport(reportSheet);
}

/**
 * Adds title to report
 * @param {Object} sheet - Report sheet object
 * @private
 */
function _addReportTitle(sheet) {
  sheet.appendRow(['']);
  const titleRange = sheet.getRange(1, 1, 1, 7);
  titleRange.merge();
  titleRange.setValue("RELATÓRIO DE COMPARAÇÃO DE CAPABILITIES");
  titleRange.setFontWeight("bold");
  titleRange.setBackground(CONFIG.COLORS.TITLE_BG);
  titleRange.setFontColor(CONFIG.COLORS.TITLE_TEXT);
  titleRange.setHorizontalAlignment("center");
  titleRange.setVerticalAlignment("middle");
  sheet.setRowHeight(1, 30);
}

/**
 * Adds message when no discrepancies are found
 * @param {Object} sheet - Report sheet object
 * @private
 */
function _addNoDiscrepanciesMessage(sheet) {
  sheet.appendRow(['']);
  const messageRange = sheet.getRange(2, 1, 1, 7);
  messageRange.merge();
  messageRange.setValue("Nenhuma divergência encontrada. As planilhas são idênticas.");
  messageRange.setFontWeight("bold");
  messageRange.setBackground(CONFIG.COLORS.SUCCESS_BG);
  messageRange.setHorizontalAlignment("center");
  messageRange.setVerticalAlignment("middle");
  sheet.setRowHeight(2, 30);
}

/**
 * Adds report headers
 * @param {Object} sheet - Report sheet object
 * @private
 */
function _addReportHeaders(sheet) {
  const headers = [
    'Tipo de Divergência',
    'Provider',
    'Modelo',
    'Capability',
    'Valor em LLM-Capabilities',
    'Valor em IDE-Capabilities',
    'Localização'
  ];
  
  sheet.appendRow(['']);
  sheet.appendRow(headers);
  
  const headerRange = sheet.getRange(3, 1, 1, headers.length);
  headerRange.setFontWeight("bold");
  headerRange.setBackground(CONFIG.COLORS.HEADER_BG);
  headerRange.setHorizontalAlignment("center");
  headerRange.setVerticalAlignment("middle");
}

/**
 * Adds discrepancies to report
 * @param {Object} sheet - Report sheet object
 * @param {Array} discrepancies - Array of discrepancies
 * @param {Array} headers - Headers from source sheet
 * @private
 */
function _addDiscrepancies(sheet, discrepancies, headers) {
  let rowIndex = 4; // Start after headers
  
  discrepancies.forEach(discrepancy => {
    let row = [];
    
    if (discrepancy.type === "header") {
      row = [
        "Cabeçalhos Diferentes",
        "-",
        "-",
        "-",
        "-",
        "-",
        "-"
      ];
    } else if (discrepancy.type === "missing_model") {
      const location = discrepancy.location === "source" 
        ? `Modelo existe apenas em ${CONFIG.TARGET_SHEET_NAME} (linha ${discrepancy.rowIndex})` 
        : `Modelo existe apenas em ${CONFIG.SOURCE_SHEET_NAME} (linha ${discrepancy.rowIndex})`;
      
      row = [
        "Modelo Ausente",
        discrepancy.provider,
        discrepancy.model,
        "-",
        "-",
        "-",
        location
      ];
    } else if (discrepancy.type === "value") {
      row = [
        "Valor Divergente",
        discrepancy.provider,
        discrepancy.model,
        discrepancy.capability,
        discrepancy.sourceValue,
        discrepancy.targetValue,
        `${CONFIG.SOURCE_SHEET_NAME} (${_columnToLetter(discrepancy.columnIndex)}${discrepancy.sourceRowIndex}) vs ${CONFIG.TARGET_SHEET_NAME} (${_columnToLetter(discrepancy.columnIndex)}${discrepancy.targetRowIndex})`
      ];
    }
    
    sheet.appendRow(row);
    rowIndex++;
  });
}

/**
 * Formats the report for better readability
 * @param {Object} sheet - Report sheet object
 * @private
 */
function _formatReport(sheet) {
  const lastRow = sheet.getLastRow();
  const lastColumn = 7; // Number of columns in report
  
  // Set column widths
  sheet.setColumnWidth(1, 150); // Type
  sheet.setColumnWidth(2, 120); // Provider
  sheet.setColumnWidth(3, 200); // Model
  sheet.setColumnWidth(4, 150); // Capability
  sheet.setColumnWidth(5, 150); // Source Value
  sheet.setColumnWidth(6, 150); // Target Value
  sheet.setColumnWidth(7, 250); // Location
  
  // Apply borders and background color
  const dataRange = sheet.getRange(3, 1, lastRow - 2, lastColumn);
  dataRange.setBorder(true, true, true, true, true, true);
  
  // Set background color for data rows
  const errorRange = sheet.getRange(4, 1, lastRow - 3, lastColumn);
  errorRange.setBackground(CONFIG.COLORS.ERROR_BG);
  
  // Center align all cells
  sheet.getRange(1, 1, lastRow, lastColumn).setHorizontalAlignment("center");
  sheet.getRange(1, 1, lastRow, lastColumn).setVerticalAlignment("middle");
  
  // Enable text wrapping
  sheet.getRange(3, 1, lastRow - 2, lastColumn).setWrap(true);
}

/**
 * Converts column index to letter (e.g., 1 -> A, 2 -> B)
 * @param {number} column - Column index
 * @return {string} Column letter
 * @private
 */
function _columnToLetter(column) {
  let temp, letter = '';
  while (column > 0) {
    temp = (column - 1) % 26;
    letter = String.fromCharCode(temp + 65) + letter;
    column = (column - temp - 1) / 26;
  }
  return letter;
}

/**
 * Checks if two arrays are equal
 * @param {Array} arr1 - First array
 * @param {Array} arr2 - Second array
 * @return {boolean} True if arrays are equal
 * @private
 */
function _arraysEqual(arr1, arr2) {
  if (arr1.length !== arr2.length) return false;
  
  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i] !== arr2[i]) return false;
  }
  
  return true;
}