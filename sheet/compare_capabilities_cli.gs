/**
 * Capabilities Comparison Tool with Detailed Logging
 * 
 * This script compares the LLM-Capabilities sheet (generated by search_llm_capabilities.gs)
 * with the IDE-Capabilities sheet to identify any discrepancies in capability status.
 * It includes detailed logging to monitor the execution in the Apps Script logs.
 */

// Configuration constants - renamed to avoid conflict with other scripts
const COMPARE_CONFIG_CLI = {
  SOURCE_SHEET_NAME: "LLM-Capabilities",
  TARGET_SHEET_NAME: "CLI-Capabilities",
  REPORT_SHEET_NAME: "Comparison-CLI-Report",
  PROGRESS_SHEET_NAME: "Progress-Tracker",
  STATUS: {
    ENABLE: "Enable",
    DISABLE: "Disable"
  },
  COLORS: {
    TITLE_BG: "#000000",
    TITLE_TEXT: "#FFFFFF",
    HEADER_BG: "#D3D3D3",
    ERROR_BG: "#FFCCCB",
    SUCCESS_BG: "#90EE90",
    ENABLE_BG: "#90EE90",  // Verde para Enable
    DISABLE_BG: "#FFCCCB"  // Vermelho para Disable
  },
  LOG_FREQUENCY: 10  // Log every X columns (adjust to control log volume)
};

/**
 * Creates custom menu when spreadsheet is opened
 */
function onOpenCompareCLI() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Comparar CLI')
      .addItem('Comparar Status de Capabilities CLI', 'compareCapabilitiesCLI')
      .addToUi();
}

/**
 * Main function to compare capabilities between sheets
 */
function compareCapabilitiesCLI() {
  try {
    // Start logging
    Logger.log("=== INICIANDO COMPARAÇÃO DE CAPABILITIES ===");
    Logger.log(`Hora de início: ${new Date().toLocaleString()}`);
    
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    Logger.log(`Planilha ativa: ${spreadsheet.getName()}`);
    
    // Delete the report sheet if it exists
    _deleteReportSheet(spreadsheet);
    
    // Get source and target sheets
    Logger.log(`Carregando planilha fonte: ${COMPARE_CONFIG_CLI.SOURCE_SHEET_NAME}`);
    const sourceSheet = spreadsheet.getSheetByName(COMPARE_CONFIG_CLI.SOURCE_SHEET_NAME);
    
    Logger.log(`Carregando planilha alvo: ${COMPARE_CONFIG_CLI.TARGET_SHEET_NAME}`);
    const targetSheet = spreadsheet.getSheetByName(COMPARE_CONFIG_CLI.TARGET_SHEET_NAME);
    
    // Validate sheets exist
    if (!sourceSheet) {
      Logger.log(`ERRO: Planilha "${COMPARE_CONFIG_CLI.SOURCE_SHEET_NAME}" não encontrada`);
      throw new Error(`Planilha "${COMPARE_CONFIG_CLI.SOURCE_SHEET_NAME}" não encontrada. Execute o script search_llm_capabilities.gs primeiro.`);
    }
    
    if (!targetSheet) {
      Logger.log(`ERRO: Planilha "${COMPARE_CONFIG_CLI.TARGET_SHEET_NAME}" não encontrada`);
      throw new Error(`Planilha "${COMPARE_CONFIG_CLI.TARGET_SHEET_NAME}" não encontrada.`);
    }
    
    // Create report sheet
    Logger.log(`Criando planilha de relatório: ${COMPARE_CONFIG_CLI.REPORT_SHEET_NAME}`);
    const reportSheet = _createReportSheet(spreadsheet);
    
    // Get data from both sheets including cell backgrounds
    Logger.log(`Obtendo dados da planilha fonte: ${COMPARE_CONFIG_CLI.SOURCE_SHEET_NAME}`);
    const sourceData = _getSheetDataWithFormatting(sourceSheet);
    Logger.log(`Dados obtidos da planilha fonte: ${sourceData.rows.length} linhas, ${sourceData.headers.length} colunas`);
    
    Logger.log(`Obtendo dados da planilha alvo: ${COMPARE_CONFIG_CLI.TARGET_SHEET_NAME}`);
    const targetData = _getSheetDataWithFormatting(targetSheet);
    Logger.log(`Dados obtidos da planilha alvo: ${targetData.rows.length} linhas, ${targetData.headers.length} colunas`);
    
    // Create lookup maps for faster comparison
    Logger.log("Criando mapas de busca para comparação rápida");
    const sourceMap = _createLookupMap(sourceData.rows, sourceData.backgrounds);
    const targetMap = _createLookupMap(targetData.rows, targetData.backgrounds);
    Logger.log(`Mapas criados: ${Object.keys(sourceMap).length} modelos na fonte, ${Object.keys(targetMap).length} modelos no alvo`);
    
    // Compare data and generate report
    Logger.log("Iniciando comparação de dados");
    const discrepancies = _compareData(sourceData, targetData, sourceMap, targetMap);
    Logger.log(`Comparação concluída. Encontradas ${discrepancies.length} divergências`);
    
    // Display report
    Logger.log("Gerando relatório de comparação");
    _displayReport(reportSheet, discrepancies, sourceData.headers);
    Logger.log("Relatório gerado com sucesso");
    
    // Prepare detailed message with discrepancies
    let message = "";
    if (discrepancies.length > 0) {
      message = `Comparação concluída. Foram encontradas ${discrepancies.length} divergências de status.\n\n`;
      
      // Add summary of discrepancies
      let statusCount = 0;
      let missingModelCount = 0;
      let headerIssue = false;
      
      discrepancies.forEach(d => {
        if (d.type === "status") statusCount++;
        else if (d.type === "missing_model") missingModelCount++;
        else if (d.type === "header") headerIssue = true;
      });
      
      if (statusCount > 0) message += `- ${statusCount} divergências de status\n`;
      if (missingModelCount > 0) message += `- ${missingModelCount} modelos ausentes\n`;
      if (headerIssue) message += "- Problema nos cabeçalhos das planilhas\n";
      
      // List first 10 discrepancies as examples
      if (discrepancies.length > 0) {
        message += "\nExemplos de divergências encontradas:\n";
        
        const maxExamples = Math.min(10, discrepancies.length);
        for (let i = 0; i < maxExamples; i++) {
          const d = discrepancies[i];
          
          if (d.type === "status") {
            message += `${i+1}. ${d.provider} - ${d.model}: ${d.capability} (${d.sourceStatus} vs ${d.targetStatus})\n`;
          } else if (d.type === "missing_model") {
            const location = d.location === "source" ? COMPARE_CONFIG_CLI.TARGET_SHEET_NAME : COMPARE_CONFIG_CLI.SOURCE_SHEET_NAME;
            message += `${i+1}. Modelo ausente: ${d.provider} - ${d.model} (apenas em ${location})\n`;
          }
        }
        
        if (discrepancies.length > maxExamples) {
          message += `... e mais ${discrepancies.length - maxExamples} divergências (veja o relatório completo na planilha ${COMPARE_CONFIG_CLI.REPORT_SHEET_NAME})`;
        }
      }
    } else {
      message = "Comparação concluída. Nenhuma divergência de status encontrada!";
    }
    
    Logger.log(`=== COMPARAÇÃO FINALIZADA ===`);
    Logger.log(`Hora de término: ${new Date().toLocaleString()}`);
    Logger.log(message);
    
  } catch (error) {
    Logger.log(`ERRO: ${error.message}`);
    Logger.log(error.stack);
    SpreadsheetApp.getUi().alert("Erro: " + error.message);
  }
}

// =============================================================================
// Private Helper Functions
// =============================================================================

/**
 * Deletes the report sheet if it exists
 * @param {Object} spreadsheet - Spreadsheet object
 * @private
 */
function _deleteReportSheet(spreadsheet) {
  const reportSheet = spreadsheet.getSheetByName(COMPARE_CONFIG_CLI.REPORT_SHEET_NAME);
  
  if (reportSheet) {
    Logger.log(`Excluindo planilha existente: ${COMPARE_CONFIG_CLI.REPORT_SHEET_NAME}`);
    spreadsheet.deleteSheet(reportSheet);
    Logger.log(`Planilha ${COMPARE_CONFIG_CLI.REPORT_SHEET_NAME} excluída com sucesso`);
  } else {
    Logger.log(`Planilha ${COMPARE_CONFIG_CLI.REPORT_SHEET_NAME} não encontrada, nenhuma exclusão necessária`);
  }
}

/**
 * Creates a new report sheet
 * @param {Object} spreadsheet - Spreadsheet object
 * @return {Object} Report sheet object
 * @private
 */
function _createReportSheet(spreadsheet) {
  Logger.log(`Criando nova planilha ${COMPARE_CONFIG_CLI.REPORT_SHEET_NAME}`);
  const reportSheet = spreadsheet.insertSheet(COMPARE_CONFIG_CLI.REPORT_SHEET_NAME);
  return reportSheet;
}

/**
 * Gets data from a sheet including headers, rows, and cell backgrounds
 * @param {Object} sheet - Sheet object
 * @return {Object} Object containing headers, rows, and backgrounds
 * @private
 */
function _getSheetDataWithFormatting(sheet) {
  const lastRow = sheet.getLastRow();
  const lastColumn = sheet.getLastColumn();
  
  Logger.log(`Obtendo dados de ${sheet.getName()}: ${lastRow} linhas, ${lastColumn} colunas`);
  
  // Get title from row 1
  Logger.log(`Obtendo título da linha 1`);
  const titleRange = sheet.getRange(1, 1, 1, lastColumn);
  const title = titleRange.getValues()[0][0];
  
  // Get headers from row 2
  Logger.log(`Obtendo cabeçalhos da linha 2`);
  const headerRange = sheet.getRange(2, 1, 1, lastColumn);
  const headers = headerRange.getValues()[0];
  
  // Log headers
  Logger.log(`Cabeçalhos encontrados: ${headers.join(', ')}`);
  
  // Get data rows (starting from row 3)
  Logger.log(`Obtendo dados das linhas (a partir da linha 3)`);
  const dataRange = sheet.getRange(3, 1, lastRow - 2, lastColumn);
  const rows = dataRange.getValues();
  const backgrounds = dataRange.getBackgrounds();
  
  Logger.log(`Dados obtidos: ${rows.length} linhas de dados`);
  
  return {
    title: title,
    headers: headers,
    rows: rows,
    backgrounds: backgrounds
  };
}

/**
 * Compares data between source and target sheets
 * @param {Object} sourceData - Source sheet data
 * @param {Object} targetData - Target sheet data
 * @param {Object} sourceMap - Source lookup map
 * @param {Object} targetMap - Target lookup map
 * @return {Array} Array of discrepancies
 * @private
 */
function _compareData(sourceData, targetData, sourceMap, targetMap) {
  const discrepancies = [];
  
  // Check if headers match
  Logger.log("Verificando se os cabeçalhos correspondem");
  if (!_arraysEqual(sourceData.headers, targetData.headers)) {
    Logger.log("ALERTA: Os cabeçalhos das planilhas não correspondem");
    Logger.log(`Cabeçalhos fonte: ${sourceData.headers.join(', ')}`);
    Logger.log(`Cabeçalhos alvo: ${targetData.headers.join(', ')}`);
    
    discrepancies.push({
      type: "header",
      message: "Os cabeçalhos das planilhas não correspondem",
      sourceHeaders: sourceData.headers,
      targetHeaders: targetData.headers
    });
    return discrepancies; // Stop comparison if headers don't match
  }
  
  Logger.log("Cabeçalhos correspondem, prosseguindo com a comparação");
  
  // Compare source to target
  Logger.log("Comparando modelos da fonte com o alvo");
  _findStatusDiscrepancies(sourceData, targetData, sourceMap, targetMap, discrepancies);
  
  // Compare target to source (to find models in target that don't exist in source)
  Logger.log("Verificando modelos ausentes");
  _findMissingModels(sourceData, targetData, sourceMap, targetMap, discrepancies);
  
  return discrepancies;
}

/**
 * Creates a lookup map for faster data access
 * @param {Array} rows - Data rows
 * @param {Array} backgrounds - Cell backgrounds
 * @return {Object} Lookup map
 * @private
 */
function _createLookupMap(rows, backgrounds) {
  const map = {};
  
  rows.forEach((row, rowIndex) => {
    const provider = row[0];
    const model = row[1];
    const key = `${provider}|${model}`;
    
    map[key] = {
      rowIndex: rowIndex,
      data: row,
      backgrounds: backgrounds ? backgrounds[rowIndex] : null
    };
  });
  
  return map;
}

/**
 * Finds status discrepancies between source and target data
 * @param {Object} sourceData - Source sheet data
 * @param {Object} targetData - Target sheet data
 * @param {Object} sourceMap - Source lookup map
 * @param {Object} targetMap - Target lookup map
 * @param {Array} discrepancies - Array to store discrepancies
 * @private
 */
function _findStatusDiscrepancies(sourceData, targetData, sourceMap, targetMap, discrepancies) {
  const totalRows = sourceData.rows.length;
  Logger.log(`Iniciando comparação de status para ${totalRows} modelos`);
  
  // Log column headers for reference
  Logger.log("Colunas de capabilities a serem comparadas:");
  for (let colIndex = 2; colIndex < sourceData.headers.length; colIndex++) {
    Logger.log(`Coluna ${_columnToLetter(colIndex + 1)} (${colIndex + 1}): ${sourceData.headers[colIndex]}`);
  }
  
  // Track progress
  let processedModels = 0;
  let statusDiscrepancies = 0;
  
  sourceData.rows.forEach((sourceRow, sourceRowIndex) => {
    const provider = sourceRow[0];
    const model = sourceRow[1];
    const key = `${provider}|${model}`;
    
    // Log progress periodically
    processedModels++;
    if (processedModels % 10 === 0 || processedModels === 1 || processedModels === totalRows) {
      Logger.log(`Progresso: Comparando modelo ${processedModels} de ${totalRows} (${Math.round(processedModels/totalRows*100)}%): ${provider} - ${model}`);
    }
    
    if (targetMap[key]) {
      // Model exists in both sheets, compare capability status
      const targetRow = targetMap[key].data;
      const sourceBackgrounds = sourceData.backgrounds[sourceRowIndex];
      const targetBackgrounds = targetMap[key].backgrounds;
      
      // Log detailed column comparison for this model
      Logger.log(`Comparando capabilities para modelo: ${provider} - ${model} (linha ${sourceRowIndex + 3})`);
      
      for (let colIndex = 2; colIndex < sourceRow.length; colIndex++) {
        const sourceStatus = sourceRow[colIndex];
        const targetStatus = targetRow[colIndex];
        const capability = sourceData.headers[colIndex];
        
        // Log column comparison based on frequency setting
        if (colIndex % COMPARE_CONFIG_CLI.LOG_FREQUENCY === 0 || colIndex === 2 || colIndex === sourceRow.length - 1) {
          Logger.log(`  Comparando coluna ${_columnToLetter(colIndex + 1)} (${colIndex + 1}): ${capability}`);
        }
        
        // Compare status values (Enable/Disable)
        if (sourceStatus !== targetStatus) {
          statusDiscrepancies++;
          
          // Log each discrepancy found
          Logger.log(`  DIVERGÊNCIA ENCONTRADA na coluna ${_columnToLetter(colIndex + 1)} (${colIndex + 1}) - ${capability}: ${sourceStatus} vs ${targetStatus}`);
          
          discrepancies.push({
            type: "status",
            provider: provider,
            model: model,
            capability: capability,
            sourceStatus: sourceStatus,
            targetStatus: targetStatus,
            sourceRowIndex: sourceRowIndex + 3, // +3 because data starts at row 3
            targetRowIndex: targetMap[key].rowIndex + 3,
            columnIndex: colIndex + 1, // +1 because arrays are 0-indexed
            sourceBackground: sourceBackgrounds[colIndex],
            targetBackground: targetBackgrounds[colIndex]
          });
        }
      }
      
      // Log completion of this model's comparison
      Logger.log(`Concluída comparação do modelo: ${provider} - ${model}`);
      
    } else {
      // Model exists in source but not in target
      Logger.log(`MODELO AUSENTE: ${provider} - ${model} existe na fonte mas não no alvo`);
      
      discrepancies.push({
        type: "missing_model",
        provider: provider,
        model: model,
        location: "target",
        rowIndex: sourceRowIndex + 3
      });
    }
  });
  
  Logger.log(`Comparação de status concluída. Encontradas ${statusDiscrepancies} divergências de status.`);
}

/**
 * Finds models that exist in target but not in source
 * @param {Object} sourceData - Source sheet data
 * @param {Object} targetData - Target sheet data
 * @param {Object} sourceMap - Source lookup map
 * @param {Object} targetMap - Target lookup map
 * @param {Array} discrepancies - Array to store discrepancies
 * @private
 */
function _findMissingModels(sourceData, targetData, sourceMap, targetMap, discrepancies) {
  Logger.log(`Verificando modelos que existem no alvo mas não na fonte`);
  let missingModelsCount = 0;
  
  targetData.rows.forEach((targetRow, targetRowIndex) => {
    const provider = targetRow[0];
    const model = targetRow[1];
    const key = `${provider}|${model}`;
    
    if (!sourceMap[key]) {
      // Model exists in target but not in source
      missingModelsCount++;
      Logger.log(`MODELO AUSENTE: ${provider} - ${model} existe no alvo mas não na fonte (linha ${targetRowIndex + 3})`);
      
      discrepancies.push({
        type: "missing_model",
        provider: provider,
        model: model,
        location: "source",
        rowIndex: targetRowIndex + 3
      });
    }
  });
  
  Logger.log(`Verificação de modelos ausentes concluída. Encontrados ${missingModelsCount} modelos ausentes.`);
}

/**
 * Displays the comparison report
 * @param {Object} reportSheet - Report sheet object
 * @param {Array} discrepancies - Array of discrepancies
 * @param {Array} headers - Headers from source sheet
 * @private
 */
function _displayReport(reportSheet, discrepancies, headers) {
  Logger.log("Iniciando geração do relatório");
  
  // Add title
  Logger.log("Adicionando título ao relatório");
  _addReportTitle(reportSheet);
  
  if (discrepancies.length === 0) {
    // No discrepancies found
    Logger.log("Nenhuma discrepância encontrada, adicionando mensagem");
    _addNoDiscrepanciesMessage(reportSheet);
    return;
  }
  
  // Add summary
  Logger.log("Adicionando resumo ao relatório");
  _addSummary(reportSheet, discrepancies);
  
  // Add report headers
  Logger.log("Adicionando cabeçalhos ao relatório");
  _addReportHeaders(reportSheet);
  
  // Add discrepancies
  Logger.log(`Adicionando ${discrepancies.length} discrepâncias ao relatório`);
  _addDiscrepancies(reportSheet, discrepancies, headers);
  
  // Format report
  Logger.log("Formatando relatório");
  _formatReport(reportSheet);
  
  // Add a link to the top of the report for easy navigation
  _addNavigationLinks(reportSheet);
  
  Logger.log("Relatório gerado com sucesso");
}

/**
 * Adds navigation links to the report
 * @param {Object} sheet - Report sheet object
 * @private
 */
function _addNavigationLinks(reportSheet) {
  // Add a navigation row below the summary
  const navRow = 3;
  reportSheet.insertRowAfter(2);
  
  const navRange = reportSheet.getRange(navRow, 1, 1, 8);
  navRange.merge();
  navRange.setValue("Clique nos links abaixo para navegar até as divergências específicas");
  navRange.setFontWeight("bold");
  navRange.setBackground("#E6E6FA"); // Light lavender
  navRange.setHorizontalAlignment("center");
}

/**
 * Adds title to report
 * @param {Object} sheet - Report sheet object
 * @private
 */
function _addReportTitle(sheet) {
  sheet.appendRow(['']);
  const titleRange = sheet.getRange(1, 1, 1, 8);
  titleRange.merge();
  titleRange.setValue("RELATÓRIO DE COMPARAÇÃO DE STATUS DE CAPABILITIES");
  titleRange.setFontWeight("bold");
  titleRange.setBackground(COMPARE_CONFIG_CLI.COLORS.TITLE_BG);
  titleRange.setFontColor(COMPARE_CONFIG_CLI.COLORS.TITLE_TEXT);
  titleRange.setHorizontalAlignment("center");
  titleRange.setVerticalAlignment("middle");
  sheet.setRowHeight(1, 30);
}

/**
 * Adds summary of discrepancies
 * @param {Object} sheet - Report sheet object
 * @param {Array} discrepancies - Array of discrepancies
 * @private
 */
function _addSummary(sheet, discrepancies) {
  // Count discrepancies by type
  let statusCount = 0;
  let missingModelCount = 0;
  let headerIssue = false;
  
  discrepancies.forEach(d => {
    if (d.type === "status") statusCount++;
    else if (d.type === "missing_model") missingModelCount++;
    else if (d.type === "header") headerIssue = true;
  });
  
  // Add summary row
  sheet.appendRow(['']);
  const summaryRange = sheet.getRange(2, 1, 1, 8);
  summaryRange.merge();
  
  let summaryText = `RESUMO: Encontradas ${discrepancies.length} divergências no total.`;
  if (statusCount > 0) summaryText += ` ${statusCount} divergências de status.`;
  if (missingModelCount > 0) summaryText += ` ${missingModelCount} modelos ausentes.`;
  if (headerIssue) summaryText += " Problema nos cabeçalhos das planilhas.";
  
  summaryRange.setValue(summaryText);
  summaryRange.setFontWeight("bold");
  summaryRange.setBackground("#FFD700"); // Amarelo para destaque
  summaryRange.setHorizontalAlignment("center");
  summaryRange.setVerticalAlignment("middle");
  sheet.setRowHeight(2, 30);
  
  Logger.log(summaryText);
}

/**
 * Adds message when no discrepancies are found
 * @param {Object} sheet - Report sheet object
 * @private
 */
function _addNoDiscrepanciesMessage(sheet) {
  sheet.appendRow(['']);
  const messageRange = sheet.getRange(2, 1, 1, 8);
  messageRange.merge();
  messageRange.setValue("Nenhuma divergência de status encontrada. Os status das capabilities são idênticos em ambas as planilhas.");
  messageRange.setFontWeight("bold");
  messageRange.setBackground(COMPARE_CONFIG_CLI.COLORS.SUCCESS_BG);
  messageRange.setHorizontalAlignment("center");
  messageRange.setVerticalAlignment("middle");
  sheet.setRowHeight(2, 30);
}

/**
 * Adds report headers
 * @param {Object} sheet - Report sheet object
 * @private
 */
function _addReportHeaders(sheet) {
  const headers = [
    'Tipo de Divergência',
    'Provider',
    'Modelo',
    'Capability',
    'Status em LLM-Capabilities',
    'Status em IDE-Capabilities',
    'Localização',
    'Ação Recomendada'
  ];
  
  sheet.appendRow(['']);
  sheet.appendRow(headers);
  
  const headerRange = sheet.getRange(sheet.getLastRow(), 1, 1, headers.length);
  headerRange.setFontWeight("bold");
  headerRange.setBackground(COMPARE_CONFIG_CLI.COLORS.HEADER_BG);
  headerRange.setHorizontalAlignment("center");
  headerRange.setVerticalAlignment("middle");
}

/**
 * Adds discrepancies to report
 * @param {Object} sheet - Report sheet object
 * @param {Array} discrepancies - Array of discrepancies
 * @param {Array} headers - Headers from source sheet
 * @private
 */
function _addDiscrepancies(sheet, discrepancies, headers) {
  let rowIndex = sheet.getLastRow() + 1; // Start after headers
  
  discrepancies.forEach((discrepancy, index) => {
    // Log progress periodically
    if (index % 20 === 0 || index === 0 || index === discrepancies.length - 1) {
      Logger.log(`Adicionando discrepância ${index + 1} de ${discrepancies.length} ao relatório`);
    }
    
    let row = [];
    
    if (discrepancy.type === "header") {
      row = [
        "Cabeçalhos Diferentes",
        "-",
        "-",
        "-",
        "-",
        "-",
        "-",
        "Verificar e alinhar os cabeçalhos das planilhas"
      ];
      sheet.appendRow(row);
    } else if (discrepancy.type === "missing_model") {
      const location = discrepancy.location === "source" 
        ? `Modelo existe apenas em ${COMPARE_CONFIG_CLI.TARGET_SHEET_NAME} (linha ${discrepancy.rowIndex})` 
        : `Modelo existe apenas em ${COMPARE_CONFIG_CLI.SOURCE_SHEET_NAME} (linha ${discrepancy.rowIndex})`;
      
      const action = discrepancy.location === "source"
        ? `Adicionar modelo ao ${COMPARE_CONFIG_CLI.SOURCE_SHEET_NAME}`
        : `Adicionar modelo ao ${COMPARE_CONFIG_CLI.TARGET_SHEET_NAME}`;
      
      row = [
        "Modelo Ausente",
        discrepancy.provider,
        discrepancy.model,
        "-",
        "-",
        "-",
        location,
        action
      ];
      sheet.appendRow(row);
    } else if (discrepancy.type === "status") {
      const location = `${COMPARE_CONFIG_CLI.SOURCE_SHEET_NAME} (${_columnToLetter(discrepancy.columnIndex)}${discrepancy.sourceRowIndex}) vs ${COMPARE_CONFIG_CLI.TARGET_SHEET_NAME} (${_columnToLetter(discrepancy.columnIndex)}${discrepancy.targetRowIndex})`;
      
      const action = `Alinhar o status de ${discrepancy.capability} para o modelo ${discrepancy.model}`;
      
      row = [
        "Status Divergente",
        discrepancy.provider,
        discrepancy.model,
        discrepancy.capability,
        discrepancy.sourceStatus,
        discrepancy.targetStatus,
        location,
        action
      ];
      sheet.appendRow(row);
      
      // Colorir as células de status de acordo com o valor (Enable/Disable)
      const currentRow = sheet.getLastRow();
      
      // Colorir a célula do status na planilha fonte
      const sourceStatusCell = sheet.getRange(currentRow, 5);
      if (discrepancy.sourceStatus === COMPARE_CONFIG_CLI.STATUS.ENABLE) {
        sourceStatusCell.setBackground(COMPARE_CONFIG_CLI.COLORS.ENABLE_BG);
      } else if (discrepancy.sourceStatus === COMPARE_CONFIG_CLI.STATUS.DISABLE) {
        sourceStatusCell.setBackground(COMPARE_CONFIG_CLI.COLORS.DISABLE_BG);
      }
      
      // Colorir a célula do status na planilha alvo
      const targetStatusCell = sheet.getRange(currentRow, 6);
      if (discrepancy.targetStatus === COMPARE_CONFIG_CLI.STATUS.ENABLE) {
        targetStatusCell.setBackground(COMPARE_CONFIG_CLI.COLORS.ENABLE_BG);
      } else if (discrepancy.targetStatus === COMPARE_CONFIG_CLI.STATUS.DISABLE) {
        targetStatusCell.setBackground(COMPARE_CONFIG_CLI.COLORS.DISABLE_BG);
      }
    }
    
    rowIndex++;
  });
}

/**
 * Formats the report for better readability
 * @param {Object} sheet - Report sheet object
 * @private
 */
function _formatReport(sheet) {
  const lastRow = sheet.getLastRow();
  const lastColumn = 8; // Number of columns in report
  
  // Set column widths
  sheet.setColumnWidth(1, 150); // Type
  sheet.setColumnWidth(2, 120); // Provider
  sheet.setColumnWidth(3, 200); // Model
  sheet.setColumnWidth(4, 150); // Capability
  sheet.setColumnWidth(5, 150); // Source Status
  sheet.setColumnWidth(6, 150); // Target Status
  sheet.setColumnWidth(7, 250); // Location
  sheet.setColumnWidth(8, 250); // Recommended Action
  
  // Apply borders and background color
  const dataRange = sheet.getRange(5, 1, lastRow - 4, lastColumn);
  dataRange.setBorder(true, true, true, true, true, true);
  
  // Set light background color for data rows (except status cells that are already colored)
  const lightErrorColor = "#FFE6E6"; // Lighter red
  
  // Apply to all rows first
  sheet.getRange(5, 1, lastRow - 4, lastColumn).setBackground(lightErrorColor);
  
  // Center align all cells
  sheet.getRange(1, 1, lastRow, lastColumn).setHorizontalAlignment("center");
  sheet.getRange(1, 1, lastRow, lastColumn).setVerticalAlignment("middle");
  
  // Left align text in the action column
  sheet.getRange(5, 8, lastRow - 4, 1).setHorizontalAlignment("left");
  
  // Enable text wrapping
  sheet.getRange(5, 1, lastRow - 4, lastColumn).setWrap(true);
  
  // Add alternating row colors for better readability
  for (let i = 5; i <= lastRow; i += 2) {
    if (i <= lastRow) {
      // Skip coloring the status cells (columns 5 and 6)
      sheet.getRange(i, 1, 1, 4).setBackground("#F8F8F8");
      sheet.getRange(i, 7, 1, 2).setBackground("#F8F8F8");
    }
  }
}

/**
 * Converts column index to letter (e.g., 1 -> A, 2 -> B)
 * @param {number} column - Column index
 * @return {string} Column letter
 * @private
 */
function _columnToLetter(column) {
  let temp, letter = '';
  while (column > 0) {
    temp = (column - 1) % 26;
    letter = String.fromCharCode(temp + 65) + letter;
    column = (column - temp - 1) / 26;
  }
  return letter;
}

/**
 * Checks if two arrays are equal
 * @param {Array} arr1 - First array
 * @param {Array} arr2 - Second array
 * @return {boolean} True if arrays are equal
 * @private
 */
function _arraysEqual(arr1, arr2) {
  if (arr1.length !== arr2.length) return false;
  
  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i] !== arr2[i]) return false;
  }
  
  return true;
}