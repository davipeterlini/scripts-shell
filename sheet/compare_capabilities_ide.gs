/**
 * Capabilities Comparison Tool with Detailed Logging
 * 
 * This script compares the LLM-Capabilities sheet (generated by search_llm_capabilities.gs)
 * with the IDE-Capabilities sheet to identify any discrepancies in capability status.
 * It includes detailed logging to monitor the execution in the Apps Script logs.
 */

// Configuration constants - renamed to avoid conflict with other scripts
const COMPARE_CONFIG_IDE = {
  SOURCE_SHEET_NAME: "LLM-Capabilities",
  TARGET_SHEET_NAME: "IDE-Capabilities",
  REPORT_SHEET_NAME: "Comparison-IDE-Report",
  PROGRESS_SHEET_NAME: "Progress-Tracker",
  STATUS: {
    ENABLE: "Enable",
    DISABLE: "Disable"
  },
  COLORS: {
    TITLE_BG: "#000000",
    TITLE_TEXT: "#FFFFFF",
    HEADER_BG: "#D3D3D3",
    ERROR_BG: "#FFCCCB",
    SUCCESS_BG: "#90EE90",
    ENABLE_BG: "#90EE90",  // Green for Enable
    DISABLE_BG: "#FFCCCB"  // Red for Disable
  },
  LOG_FREQUENCY: 10  // Log every X columns (adjust to control log volume)
};

/**
 * Creates custom menu when spreadsheet is opened
 */
function onOpenCompareIDE() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Compare IDE')
      .addItem('Compare IDE Capabilities Status', 'compareCapabilitiesIDE')
      .addToUi();
}

/**
 * Main function to compare capabilities between sheets
 */
function compareCapabilitiesIDE() {
  try {
    // Start logging
    Logger.log("=== STARTING CAPABILITIES COMPARISON ===");
    Logger.log(`Start time: ${new Date().toLocaleString()}`);
    
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    Logger.log(`Active spreadsheet: ${spreadsheet.getName()}`);
    
    // Delete the report sheet if it exists
    _deleteReportSheetIDE(spreadsheet);
    
    // Get source and target sheets
    Logger.log(`Loading source sheet: ${COMPARE_CONFIG_IDE.SOURCE_SHEET_NAME}`);
    const sourceSheet = spreadsheet.getSheetByName(COMPARE_CONFIG_IDE.SOURCE_SHEET_NAME);
    
    Logger.log(`Loading target sheet: ${COMPARE_CONFIG_IDE.TARGET_SHEET_NAME}`);
    const targetSheet = spreadsheet.getSheetByName(COMPARE_CONFIG_IDE.TARGET_SHEET_NAME);
    
    // Validate sheets exist
    if (!sourceSheet) {
      Logger.log(`ERROR: Sheet "${COMPARE_CONFIG_IDE.SOURCE_SHEET_NAME}" not found`);
      throw new Error(`Sheet "${COMPARE_CONFIG_IDE.SOURCE_SHEET_NAME}" not found. Run the search_llm_capabilities.gs script first.`);
    }
    
    if (!targetSheet) {
      Logger.log(`ERROR: Sheet "${COMPARE_CONFIG_IDE.TARGET_SHEET_NAME}" not found`);
      throw new Error(`Sheet "${COMPARE_CONFIG_IDE.TARGET_SHEET_NAME}" not found.`);
    }
    
    // Create report sheet
    Logger.log(`Creating report sheet: ${COMPARE_CONFIG_IDE.REPORT_SHEET_NAME}`);
    const reportSheet = _createReportSheetIDE(spreadsheet);
    
    // Get data from both sheets including cell backgrounds
    Logger.log(`Getting data from source sheet: ${COMPARE_CONFIG_IDE.SOURCE_SHEET_NAME}`);
    const sourceData = _getSheetDataWithFormattingIDE(sourceSheet);
    Logger.log(`Data obtained from source sheet: ${sourceData.rows.length} rows, ${sourceData.headers.length} columns`);
    
    Logger.log(`Getting data from target sheet: ${COMPARE_CONFIG_IDE.TARGET_SHEET_NAME}`);
    const targetData = _getSheetDataWithFormattingIDE(targetSheet);
    Logger.log(`Data obtained from target sheet: ${targetData.rows.length} rows, ${targetData.headers.length} columns`);
    
    // Create lookup maps for faster comparison
    Logger.log("Creating lookup maps for fast comparison");
    const sourceMap = _createLookupMapIDE(sourceData.rows, sourceData.backgrounds);
    const targetMap = _createLookupMapIDE(targetData.rows, targetData.backgrounds);
    Logger.log(`Maps created: ${Object.keys(sourceMap).length} models in source, ${Object.keys(targetMap).length} models in target`);
    
    // Compare data and generate report
    Logger.log("Starting data comparison");
    const discrepancies = _compareDataIDE(sourceData, targetData, sourceMap, targetMap);
    Logger.log(`Comparison completed. Found ${discrepancies.length} discrepancies`);
    
    // Display report
    Logger.log("Generating comparison report");
    _displayReportIDE(reportSheet, discrepancies, sourceData.headers);
    Logger.log("Report generated successfully");
    
    // Prepare detailed message with discrepancies
    let message = "";
    if (discrepancies.length > 0) {
      message = `Comparison completed. Found ${discrepancies.length} status discrepancies.\n\n`;
      
      // Add summary of discrepancies
      let statusCount = 0;
      let missingModelCount = 0;
      let headerIssue = false;
      
      discrepancies.forEach(d => {
        if (d.type === "status") statusCount++;
        else if (d.type === "missing_model") missingModelCount++;
        else if (d.type === "header") headerIssue = true;
      });
      
      if (statusCount > 0) message += `- ${statusCount} status discrepancies\n`;
      if (missingModelCount > 0) message += `- ${missingModelCount} missing models\n`;
      if (headerIssue) message += "- Issue with spreadsheet headers\n";
      
      // List first 10 discrepancies as examples
      if (discrepancies.length > 0) {
        message += "\nExamples of found discrepancies:\n";
        
        const maxExamples = Math.min(10, discrepancies.length);
        for (let i = 0; i < maxExamples; i++) {
          const d = discrepancies[i];
          
          if (d.type === "status") {
            message += `${i+1}. ${d.provider} - ${d.model}: ${d.capability} (${d.sourceStatus} vs ${d.targetStatus})\n`;
          } else if (d.type === "missing_model") {
            const location = d.location === "source" ? COMPARE_CONFIG_IDE.TARGET_SHEET_NAME : COMPARE_CONFIG_IDE.SOURCE_SHEET_NAME;
            message += `${i+1}. Missing model: ${d.provider} - ${d.model} (only in ${location})\n`;
          }
        }
        
        if (discrepancies.length > maxExamples) {
          message += `... and ${discrepancies.length - maxExamples} more discrepancies (see full report in ${COMPARE_CONFIG_IDE.REPORT_SHEET_NAME} sheet)`;
        }
      }
    } else {
      message = "Comparison completed. No status discrepancies found!";
    }
    
    Logger.log(`=== COMPARISON FINISHED ===`);
    Logger.log(`End time: ${new Date().toLocaleString()}`);
    Logger.log(message);
    
  } catch (error) {
    Logger.log(`ERROR: ${error.message}`);
    Logger.log(error.stack);
    SpreadsheetApp.getUi().alert("Error: " + error.message);
  }
}

// =============================================================================
// Private Helper Functions
// =============================================================================

/**
 * Deletes the report sheet if it exists
 * @param {Object} spreadsheet - Spreadsheet object
 * @private
 */
function _deleteReportSheetIDE(spreadsheet) {
  const reportSheet = spreadsheet.getSheetByName(COMPARE_CONFIG_IDE.REPORT_SHEET_NAME);
  
  if (reportSheet) {
    Logger.log(`Deleting existing sheet: ${COMPARE_CONFIG_IDE.REPORT_SHEET_NAME}`);
    spreadsheet.deleteSheet(reportSheet);
    Logger.log(`Sheet ${COMPARE_CONFIG_IDE.REPORT_SHEET_NAME} deleted successfully`);
  } else {
    Logger.log(`Sheet ${COMPARE_CONFIG_IDE.REPORT_SHEET_NAME} not found, no deletion necessary`);
  }
}

/**
 * Creates a new report sheet
 * @param {Object} spreadsheet - Spreadsheet object
 * @return {Object} Report sheet object
 * @private
 */
function _createReportSheetIDE(spreadsheet) {
  Logger.log(`Creating new sheet ${COMPARE_CONFIG_IDE.REPORT_SHEET_NAME}`);
  const reportSheet = spreadsheet.insertSheet(COMPARE_CONFIG_IDE.REPORT_SHEET_NAME);
  return reportSheet;
}

/**
 * Gets data from a sheet including headers, rows, and cell backgrounds
 * @param {Object} sheet - Sheet object
 * @return {Object} Object containing headers, rows, and backgrounds
 * @private
 */
function _getSheetDataWithFormattingIDE(sheet) {
  const lastRow = sheet.getLastRow();
  const lastColumn = sheet.getLastColumn();
  
  Logger.log(`Getting data from ${sheet.getName()}: ${lastRow} rows, ${lastColumn} columns`);
  
  // Get title from row 1
  Logger.log(`Getting title from row 1`);
  const titleRange = sheet.getRange(1, 1, 1, lastColumn);
  const title = titleRange.getValues()[0][0];
  
  // Get headers from row 2
  Logger.log(`Getting headers from row 2`);
  const headerRange = sheet.getRange(2, 1, 1, lastColumn);
  const headers = headerRange.getValues()[0];
  
  // Log headers
  Logger.log(`Headers found: ${headers.join(', ')}`);
  
  // Get data rows (starting from row 3)
  Logger.log(`Getting data from rows (starting from row 3)`);
  const dataRange = sheet.getRange(3, 1, lastRow - 2, lastColumn);
  const rows = dataRange.getValues();
  const backgrounds = dataRange.getBackgrounds();
  
  Logger.log(`Data obtained: ${rows.length} data rows`);
  
  return {
    title: title,
    headers: headers,
    rows: rows,
    backgrounds: backgrounds
  };
}

/**
 * Compares data between source and target sheets
 * @param {Object} sourceData - Source sheet data
 * @param {Object} targetData - Target sheet data
 * @param {Object} sourceMap - Source lookup map
 * @param {Object} targetMap - Target lookup map
 * @return {Array} Array of discrepancies
 * @private
 */
function _compareDataIDE(sourceData, targetData, sourceMap, targetMap) {
  const discrepancies = [];
  
  // Check if headers match
  Logger.log("Checking if headers match");
  if (!_arraysEqualIDE(sourceData.headers, targetData.headers)) {
    Logger.log("WARNING: Sheet headers do not match");
    Logger.log(`Source headers: ${sourceData.headers.join(', ')}`);
    Logger.log(`Target headers: ${targetData.headers.join(', ')}`);
    
    discrepancies.push({
      type: "header",
      message: "Sheet headers do not match",
      sourceHeaders: sourceData.headers,
      targetHeaders: targetData.headers
    });
    return discrepancies; // Stop comparison if headers don't match
  }
  
  Logger.log("Headers match, proceeding with comparison");
  
  // Compare source to target
  Logger.log("Comparing models from source to target");
  _findStatusDiscrepanciesIDE(sourceData, targetData, sourceMap, targetMap, discrepancies);
  
  // Compare target to source (to find models in target that don't exist in source)
  Logger.log("Checking for missing models");
  _findMissingModelsIDE(sourceData, targetData, sourceMap, targetMap, discrepancies);
  
  return discrepancies;
}

/**
 * Creates a lookup map for faster data access
 * @param {Array} rows - Data rows
 * @param {Array} backgrounds - Cell backgrounds
 * @return {Object} Lookup map
 * @private
 */
function _createLookupMapIDE(rows, backgrounds) {
  const map = {};
  
  rows.forEach((row, rowIndex) => {
    const provider = row[0];
    const model = row[1];
    const key = `${provider}|${model}`;
    
    map[key] = {
      rowIndex: rowIndex,
      data: row,
      backgrounds: backgrounds ? backgrounds[rowIndex] : null
    };
  });
  
  return map;
}

/**
 * Finds status discrepancies between source and target data
 * @param {Object} sourceData - Source sheet data
 * @param {Object} targetData - Target sheet data
 * @param {Object} sourceMap - Source lookup map
 * @param {Object} targetMap - Target lookup map
 * @param {Array} discrepancies - Array to store discrepancies
 * @private
 */
function _findStatusDiscrepanciesIDE(sourceData, targetData, sourceMap, targetMap, discrepancies) {
  const totalRows = sourceData.rows.length;
  Logger.log(`Starting status comparison for ${totalRows} models`);
  
  // Log column headers for reference
  Logger.log("Capability columns to be compared:");
  for (let colIndex = 2; colIndex < sourceData.headers.length; colIndex++) {
    Logger.log(`Column ${_columnToLetterIDE(colIndex + 1)} (${colIndex + 1}): ${sourceData.headers[colIndex]}`);
  }
  
  // Track progress
  let processedModels = 0;
  let statusDiscrepancies = 0;
  
  sourceData.rows.forEach((sourceRow, sourceRowIndex) => {
    const provider = sourceRow[0];
    const model = sourceRow[1];
    const key = `${provider}|${model}`;
    
    // Log progress periodically
    processedModels++;
    if (processedModels % 10 === 0 || processedModels === 1 || processedModels === totalRows) {
      Logger.log(`Progress: Comparing model ${processedModels} of ${totalRows} (${Math.round(processedModels/totalRows*100)}%): ${provider} - ${model}`);
    }
    
    if (targetMap[key]) {
      // Model exists in both sheets, compare capability status
      const targetRow = targetMap[key].data;
      const sourceBackgrounds = sourceData.backgrounds[sourceRowIndex];
      const targetBackgrounds = targetMap[key].backgrounds;
      
      // Log detailed column comparison for this model
      Logger.log(`Comparing capabilities for model: ${provider} - ${model} (row ${sourceRowIndex + 3})`);
      
      for (let colIndex = 2; colIndex < sourceRow.length; colIndex++) {
        const sourceStatus = sourceRow[colIndex];
        const targetStatus = targetRow[colIndex];
        const capability = sourceData.headers[colIndex];
        
        // Log column comparison based on frequency setting
        if (colIndex % COMPARE_CONFIG_IDE.LOG_FREQUENCY === 0 || colIndex === 2 || colIndex === sourceRow.length - 1) {
          Logger.log(`  Comparing column ${_columnToLetterIDE(colIndex + 1)} (${colIndex + 1}): ${capability}`);
        }
        
        // Compare status values (Enable/Disable)
        if (sourceStatus !== targetStatus) {
          statusDiscrepancies++;
          
          // Log each discrepancy found
          Logger.log(`  DISCREPANCY FOUND in column ${_columnToLetterIDE(colIndex + 1)} (${colIndex + 1}) - ${capability}: ${sourceStatus} vs ${targetStatus}`);
          
          discrepancies.push({
            type: "status",
            provider: provider,
            model: model,
            capability: capability,
            sourceStatus: sourceStatus,
            targetStatus: targetStatus,
            sourceRowIndex: sourceRowIndex + 3, // +3 because data starts at row 3
            targetRowIndex: targetMap[key].rowIndex + 3,
            columnIndex: colIndex + 1, // +1 because arrays are 0-indexed
            sourceBackground: sourceBackgrounds[colIndex],
            targetBackground: targetBackgrounds[colIndex]
          });
        }
      }
      
      // Log completion of this model's comparison
      Logger.log(`Completed comparison for model: ${provider} - ${model}`);
      
    } else {
      // Model exists in source but not in target
      Logger.log(`MISSING MODEL: ${provider} - ${model} exists in source but not in target`);
      
      discrepancies.push({
        type: "missing_model",
        provider: provider,
        model: model,
        location: "target",
        rowIndex: sourceRowIndex + 3
      });
    }
  });
  
  Logger.log(`Status comparison completed. Found ${statusDiscrepancies} status discrepancies.`);
}

/**
 * Finds models that exist in target but not in source
 * @param {Object} sourceData - Source sheet data
 * @param {Object} targetData - Target sheet data
 * @param {Object} sourceMap - Source lookup map
 * @param {Object} targetMap - Target lookup map
 * @param {Array} discrepancies - Array to store discrepancies
 * @private
 */
function _findMissingModelsIDE(sourceData, targetData, sourceMap, targetMap, discrepancies) {
  Logger.log(`Checking for models that exist in target but not in source`);
  let missingModelsCount = 0;
  
  targetData.rows.forEach((targetRow, targetRowIndex) => {
    const provider = targetRow[0];
    const model = targetRow[1];
    const key = `${provider}|${model}`;
    
    if (!sourceMap[key]) {
      // Model exists in target but not in source
      missingModelsCount++;
      Logger.log(`MISSING MODEL: ${provider} - ${model} exists in target but not in source (row ${targetRowIndex + 3})`);
      
      discrepancies.push({
        type: "missing_model",
        provider: provider,
        model: model,
        location: "source",
        rowIndex: targetRowIndex + 3
      });
    }
  });
  
  Logger.log(`Missing models check completed. Found ${missingModelsCount} missing models.`);
}

/**
 * Displays the comparison report
 * @param {Object} reportSheet - Report sheet object
 * @param {Array} discrepancies - Array of discrepancies
 * @param {Array} headers - Headers from source sheet
 * @private
 */
function _displayReportIDE(reportSheet, discrepancies, headers) {
  Logger.log("Starting report generation");
  
  // Add title
  Logger.log("Adding title to report");
  _addReportTitleIDE(reportSheet);
  
  if (discrepancies.length === 0) {
    // No discrepancies found
    Logger.log("No discrepancies found, adding message");
    _addNoDiscrepanciesMessageIDE(reportSheet);
    return; // Important: return here to avoid additional processing
  }
  
  // Add summary
  Logger.log("Adding summary to report");
  _addSummaryIDE(reportSheet, discrepancies);
  
  // Add report headers
  Logger.log("Adding headers to report");
  _addReportHeadersIDE(reportSheet);
  
  // Add discrepancies
  Logger.log(`Adding ${discrepancies.length} discrepancies to report`);
  _addDiscrepanciesIDE(reportSheet, discrepancies, headers);
  
  // Format report
  Logger.log("Formatting report");
  _formatReportIDE(reportSheet);
  
  // Add a link to the top of the report for easy navigation
  _addNavigationLinksIDE(reportSheet);
  
  Logger.log("Report generated successfully");
}

/**
 * Adds navigation links to the report
 * @param {Object} sheet - Report sheet object
 * @private
 */
function _addNavigationLinksIDE(reportSheet) {
  // Add a navigation row below the summary
  const navRow = 3;
  reportSheet.insertRowAfter(2);
  
  const navRange = reportSheet.getRange(navRow, 1, 1, 8);
  navRange.merge();
  navRange.setValue("Click the links below to navigate to specific discrepancies");
  navRange.setFontWeight("bold");
  navRange.setBackground("#E6E6FA"); // Light lavender
  navRange.setHorizontalAlignment("center");
}

/**
 * Adds title to report
 * @param {Object} sheet - Report sheet object
 * @private
 */
function _addReportTitleIDE(sheet) {
  sheet.appendRow(['']);
  const titleRange = sheet.getRange(1, 1, 1, 8);
  titleRange.merge();
  titleRange.setValue("CAPABILITIES STATUS COMPARISON REPORT");
  titleRange.setFontWeight("bold");
  titleRange.setBackground(COMPARE_CONFIG_IDE.COLORS.TITLE_BG);
  titleRange.setFontColor(COMPARE_CONFIG_IDE.COLORS.TITLE_TEXT);
  titleRange.setHorizontalAlignment("center");
  titleRange.setVerticalAlignment("middle");
  sheet.setRowHeight(1, 30);
}

/**
 * Adds summary of discrepancies
 * @param {Object} sheet - Report sheet object
 * @param {Array} discrepancies - Array of discrepancies
 * @private
 */
function _addSummaryIDE(sheet, discrepancies) {
  // Count discrepancies by type
  let statusCount = 0;
  let missingModelCount = 0;
  let headerIssue = false;
  
  discrepancies.forEach(d => {
    if (d.type === "status") statusCount++;
    else if (d.type === "missing_model") missingModelCount++;
    else if (d.type === "header") headerIssue = true;
  });
  
  // Add summary row
  sheet.appendRow(['']);
  const summaryRange = sheet.getRange(2, 1, 1, 8);
  summaryRange.merge();
  
  let summaryText = `SUMMARY: Found ${discrepancies.length} discrepancies in total.`;
  if (statusCount > 0) summaryText += ` ${statusCount} status discrepancies.`;
  if (missingModelCount > 0) summaryText += ` ${missingModelCount} missing models.`;
  if (headerIssue) summaryText += " Issue with spreadsheet headers.";
  
  summaryRange.setValue(summaryText);
  summaryRange.setFontWeight("bold");
  summaryRange.setBackground("#FFD700"); // Yellow for highlighting
  summaryRange.setHorizontalAlignment("center");
  summaryRange.setVerticalAlignment("middle");
  sheet.setRowHeight(2, 30);
  
  Logger.log(summaryText);
}

/**
 * Adds message when no discrepancies are found
 * @param {Object} sheet - Report sheet object
 * @private
 */
function _addNoDiscrepanciesMessageIDE(sheet) {
  sheet.appendRow(['']);
  const messageRange = sheet.getRange(2, 1, 1, 8);
  messageRange.merge();
  messageRange.setValue("No status discrepancies found. Capability statuses are identical in both sheets.");
  messageRange.setFontWeight("bold");
  messageRange.setBackground(COMPARE_CONFIG_IDE.COLORS.SUCCESS_BG);
  messageRange.setHorizontalAlignment("center");
  messageRange.setVerticalAlignment("middle");
  sheet.setRowHeight(2, 30);
}

/**
 * Adds report headers
 * @param {Object} sheet - Report sheet object
 * @private
 */
function _addReportHeadersIDE(sheet) {
  const headers = [
    'Discrepancy Type',
    'Provider',
    'Model',
    'Capability',
    'Status in LLM-Capabilities',
    'Status in IDE-Capabilities',
    'Location',
    'Recommended Action'
  ];
  
  sheet.appendRow(['']);
  sheet.appendRow(headers);
  
  const headerRange = sheet.getRange(sheet.getLastRow(), 1, 1, headers.length);
  headerRange.setFontWeight("bold");
  headerRange.setBackground(COMPARE_CONFIG_IDE.COLORS.HEADER_BG);
  headerRange.setHorizontalAlignment("center");
  headerRange.setVerticalAlignment("middle");
}

/**
 * Adds discrepancies to report
 * @param {Object} sheet - Report sheet object
 * @param {Array} discrepancies - Array of discrepancies
 * @param {Array} headers - Headers from source sheet
 * @private
 */
function _addDiscrepanciesIDE(sheet, discrepancies, headers) {
  let rowIndex = sheet.getLastRow() + 1; // Start after headers
  
  discrepancies.forEach((discrepancy, index) => {
    // Log progress periodically
    if (index % 20 === 0 || index === 0 || index === discrepancies.length - 1) {
      Logger.log(`Adding discrepancy ${index + 1} of ${discrepancies.length} to report`);
    }
    
    let row = [];
    
    if (discrepancy.type === "header") {
      row = [
        "Different Headers",
        "-",
        "-",
        "-",
        "-",
        "-",
        "-",
        "Check and align spreadsheet headers"
      ];
      sheet.appendRow(row);
    } else if (discrepancy.type === "missing_model") {
      const location = discrepancy.location === "source" 
        ? `Model exists only in ${COMPARE_CONFIG_IDE.TARGET_SHEET_NAME} (row ${discrepancy.rowIndex})` 
        : `Model exists only in ${COMPARE_CONFIG_IDE.SOURCE_SHEET_NAME} (row ${discrepancy.rowIndex})`;
      
      const action = discrepancy.location === "source"
        ? `Add model to ${COMPARE_CONFIG_IDE.SOURCE_SHEET_NAME}`
        : `Add model to ${COMPARE_CONFIG_IDE.TARGET_SHEET_NAME}`;
      
      row = [
        "Missing Model",
        discrepancy.provider,
        discrepancy.model,
        "-",
        "-",
        "-",
        location,
        action
      ];
      sheet.appendRow(row);
    } else if (discrepancy.type === "status") {
      const location = `${COMPARE_CONFIG_IDE.SOURCE_SHEET_NAME} (${_columnToLetterIDE(discrepancy.columnIndex)}${discrepancy.sourceRowIndex}) vs ${COMPARE_CONFIG_IDE.TARGET_SHEET_NAME} (${_columnToLetterIDE(discrepancy.columnIndex)}${discrepancy.targetRowIndex})`;
      
      const action = `Align status of ${discrepancy.capability} for model ${discrepancy.model}`;
      
      row = [
        "Divergent Status",
        discrepancy.provider,
        discrepancy.model,
        discrepancy.capability,
        discrepancy.sourceStatus,
        discrepancy.targetStatus,
        location,
        action
      ];
      sheet.appendRow(row);
      
      // Color status cells according to value (Enable/Disable)
      const currentRow = sheet.getLastRow();
      
      // Color the status cell in source sheet
      const sourceStatusCell = sheet.getRange(currentRow, 5);
      if (discrepancy.sourceStatus === COMPARE_CONFIG_IDE.STATUS.ENABLE) {
        sourceStatusCell.setBackground(COMPARE_CONFIG_IDE.COLORS.ENABLE_BG);
      } else if (discrepancy.sourceStatus === COMPARE_CONFIG_IDE.STATUS.DISABLE) {
        sourceStatusCell.setBackground(COMPARE_CONFIG_IDE.COLORS.DISABLE_BG);
      }
      
      // Color the status cell in target sheet
      const targetStatusCell = sheet.getRange(currentRow, 6);
      if (discrepancy.targetStatus === COMPARE_CONFIG_IDE.STATUS.ENABLE) {
        targetStatusCell.setBackground(COMPARE_CONFIG_IDE.COLORS.ENABLE_BG);
      } else if (discrepancy.targetStatus === COMPARE_CONFIG_IDE.STATUS.DISABLE) {
        targetStatusCell.setBackground(COMPARE_CONFIG_IDE.COLORS.DISABLE_BG);
      }
    }
    
    rowIndex++;
  });
}

/**
 * Formats the report for better readability
 * @param {Object} sheet - Report sheet object
 * @private
 */
function _formatReportIDE(sheet) {
  const lastRow = sheet.getLastRow();
  const lastColumn = 8; // Number of columns in report
  
  // Check if there are enough rows to format
  if (lastRow < 5) {
    Logger.log("Not enough rows to format the report");
    return;
  }
  
  // Set column widths
  sheet.setColumnWidth(1, 150); // Type
  sheet.setColumnWidth(2, 120); // Provider
  sheet.setColumnWidth(3, 200); // Model
  sheet.setColumnWidth(4, 150); // Capability
  sheet.setColumnWidth(5, 150); // Source Status
  sheet.setColumnWidth(6, 150); // Target Status
  sheet.setColumnWidth(7, 250); // Location
  sheet.setColumnWidth(8, 250); // Recommended Action
  
  // Apply borders and background color
  const dataRange = sheet.getRange(5, 1, lastRow - 4, lastColumn);
  dataRange.setBorder(true, true, true, true, true, true);
  
  // Set light background color for data rows (except status cells that are already colored)
  const lightErrorColor = "#FFE6E6"; // Lighter red
  
  // Apply to all rows first
  sheet.getRange(5, 1, lastRow - 4, lastColumn).setBackground(lightErrorColor);
  
  // Center align all cells
  sheet.getRange(1, 1, lastRow, lastColumn).setHorizontalAlignment("center");
  sheet.getRange(1, 1, lastRow, lastColumn).setVerticalAlignment("middle");
  
  // Left align text in the action column
  if (lastRow >= 5) {
    sheet.getRange(5, 8, lastRow - 4, 1).setHorizontalAlignment("left");
  }
  
  // Enable text wrapping
  sheet.getRange(5, 1, lastRow - 4, lastColumn).setWrap(true);
  
  // Add alternating row colors for better readability
  for (let i = 5; i <= lastRow; i += 2) {
    if (i <= lastRow) {
      // Skip coloring the status cells (columns 5 and 6)
      sheet.getRange(i, 1, 1, 4).setBackground("#F8F8F8");
      sheet.getRange(i, 7, 1, 2).setBackground("#F8F8F8");
    }
  }
}

/**
 * Converts column index to letter (e.g., 1 -> A, 2 -> B)
 * @param {number} column - Column index
 * @return {string} Column letter
 * @private
 */
function _columnToLetterIDE(column) {
  let temp, letter = '';
  while (column > 0) {
    temp = (column - 1) % 26;
    letter = String.fromCharCode(temp + 65) + letter;
    column = (column - temp - 1) / 26;
  }
  return letter;
}

/**
 * Checks if two arrays are equal
 * @param {Array} arr1 - First array
 * @param {Array} arr2 - Second array
 * @return {boolean} True if arrays are equal
 * @private
 */
function _arraysEqualIDE(arr1, arr2) {
  if (arr1.length !== arr2.length) return false;
  
  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i] !== arr2[i]) return false;
  }
  
  return true;
}